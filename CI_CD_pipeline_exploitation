-create a guest account or brute force your access
- dump repository and search for leaks and sensitive information
-put my malicious ssh keys
- access the public keys user has set in his account in https://<victim_ip>/<username>.keys,
- check if it’s required for a user to sign the commits
- create a malicious branch
- - create a malicious pipeline
- create a malicious webhook
-check if a user who pushes the commit cannot approve this commit
-check the configuration of the github actions
-check the branch protection of the repository


TeamCity
-create a guest account to get an access

Jenkins ( requires credentials)
-I can get a command execution by:
New-Item -> Freestyle project ->Build ->Execute Windows Batch command

                      Or

Manage Jenkins -> Script Console -> println(“<cmd>”.execute().text)


Source code management (github,bitbucket,gitlab)
-I can dump a git directory by using 

Git clone <url>

              Or

Python gitdumper.py <url>

useful git commands

Git log  #to see all digests
Git diff <digest>  #to see the content
Git reflog   #to see reverted commits
git branch #to check existence of different branches
git checkout <branch_name> #to switch to different branch
Git reset --hard <digest>  #to retrieve binary

Gitlab-rails console
      U=User.find(1)
       Pp u.attributes
     u.admin= true
     u.save!


to check configuration of the github actions
https://github.com/organizations/<org_name>/settings/actions


to check the branch protection
https://github.com/<orgname>/<reponame>/settings/branches

malicious Github Action could get unauthorised access to github
GOGS
when I got access as an admin  I can get a code execution by 

Repository-> Settings of this repository-> git hooks -> update -> put reverse shell code -> create a new file in this repository-> malicious git hook will be triggered automatically



SVN
svn ls svn://<victim_ip>
Svn log svn://<victim_ip>  #to get revision numbers
Svn checkout - <revision_number> svn://<victim_ip> #to dump files 

AzureDevOps 

-to create a malicious branch 
 adding a malicious file to the repository

Choose a project -> repos -> clone a repo to your desktop -> cp shell <repo> -> git add . -> git commit –m “my commit” -> git push

#If I got a message “commit to this branch is not allowed” means that I need to create another branch

Git branch simon
Git checkout simon
Git push –set-upstream origin simon

#now in the AzureDevportal, in the repo I should see my branch with my malicious file
Create a pull request with a master
Choose 1 in the work items 

# and now you merged you malicious branch with the main one
 
Creating malicious pipeline (requires prior access to the target)

Choose project-> pipeline -> build->”use a classic editor to create a pipeline with YAML” -> Empty pipeline -> add powershell -> path to the malicious powershell file on the target machine-> Save and Queue

Apache Airflow

check  if value of the variables is in the masked format
http://<airflow>/variable/list/

-create a malicious DAG to get a reverse shell
